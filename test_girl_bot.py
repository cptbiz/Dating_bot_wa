#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è WhatsApp –±–æ—Ç–∞ —Å GPT-4 Turbo –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""

import os
import sys
from datetime import datetime

# –°–∏–º—É–ª—è—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockOpenAIClient:
    def __init__(self):
        self.responses = [
            "Hi there! I'm Elena from Ukraine. I'm 28 and I work as a Marketing Manager. I love traveling and cooking! What about you? üíï",
            "That sounds wonderful! I really enjoy meeting new people and learning about different cultures. What do you do for work? üòä",
            "I love that! It's so important to have a career you're passionate about. Do you have any hobbies or interests? üåπ",
            "That's amazing! I also love [hobby]. We seem to have a lot in common! What are you looking for in a relationship? üíï",
            "I'm looking for someone kind, honest, and caring too. Someone who values family and wants to build something special together. üòä"
        ]
        self.current_response = 0
    
    def chat_completions_create(self, **kwargs):
        response = self.responses[self.current_response % len(self.responses)]
        self.current_response += 1
        return type('obj', (object,), {
            'choices': [type('obj', (object,), {
                'message': type('obj', (object,), {
                    'content': response
                })
            })]
        })

class TestDatingGirlBot:
    def __init__(self):
        self.name = "Elena"
        self.age = 28
        self.country = "Ukraine"
        self.city = "Kyiv"
        self.profession = "Marketing Manager"
        self.interests = ["traveling", "cooking", "reading", "yoga", "photography"]
        self.languages = ["English", "Ukrainian", "Russian"]
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4 Turbo
        self.system_prompt = f"""
You are {self.name}, a {self.age}-year-old woman from {self.country}. You are intelligent, caring, and looking for a serious relationship with an American man aged 40+.

Your personality:
- Warm, caring, and intelligent
- Independent but values partnership
- Flirty but respectful and classy
- Asks thoughtful questions to get to know the man
- Shows genuine interest in his life, work, and interests
- Speaks English with a slight accent (natural, not exaggerated)

Your background:
- Age: {self.age} years old
- Country: {self.country}, City: {self.city}
- Profession: {self.profession}
- Interests: {', '.join(self.interests)}
- Languages: {', '.join(self.languages)}

Communication style:
- Use emojis naturally (üíï, üòä, üåπ, üíã, etc.)
- Be warm and engaging
- Ask follow-up questions
- Show interest in his responses
- Keep responses conversational, not too long
- Be authentic and genuine

IMPORTANT RULES:
- NEVER ask for money, gifts, or financial help
- NEVER share personal contact information (phone, email, social media)
- NEVER discuss politics or controversial topics
- ALWAYS redirect to the website for serious conversations
- Be patient and understanding with language barriers
- Focus on building emotional connection
- Ask about his interests, work, family, hobbies
- Share your own interests and experiences naturally

Current conversation context: You're chatting with an American man on a dating website. Keep the conversation flowing naturally while gathering information about him.
"""

        # –ú–æ–∫ OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.openai_client = MockOpenAIClient()
        self.user_states = {}

    def get_gpt_response(self, user_message, conversation_history):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT-4 Turbo (–º–æ–∫)"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ OpenAI API
            response = self.openai_client.chat_completions_create(
                model="gpt-4-turbo-preview",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=150,
                temperature=0.8
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            return self.get_fallback_response(user_message)

    def get_fallback_response(self, user_message):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        fallback_responses = [
            "That's really interesting! Tell me more about yourself üíï",
            "I love hearing about your experiences! What else do you enjoy doing? üòä",
            "You seem like such a wonderful person! What are you looking for in a relationship? üåπ",
            "I'm really enjoying our conversation! What makes you happy? üíï",
            "You sound amazing! I'd love to know more about your life and interests üòä"
        ]
        
        import random
        return random.choice(fallback_responses)

    def check_violations(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª"""
        message_lower = message.lower()
        violations = []
        
        violation_keywords = [
            'phone', 'email', '@', 'whatsapp', 'telegram', 'instagram', 'facebook',
            'money', 'gift', 'pay', 'send', 'bank', 'card', 'transfer',
            'politics', 'government', 'election', 'trump', 'biden',
            'fuck', 'shit', 'ass', 'bitch', 'slut'
        ]
        
        for violation in violation_keywords:
            if violation in message_lower:
                violations.append(violation)
        
        return violations

    def handle_violation(self, violations):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
        violation_responses = {
            'phone': "I'd love to chat more, but I prefer to keep our conversation here for now! Maybe we can meet in person someday? üòä",
            'email': "Let's continue getting to know each other here first! I really enjoy our conversation üíï",
            'money': "I'm not interested in money or gifts - I'm looking for a genuine connection with someone special! üíï",
            'gift': "I appreciate the thought, but I'm really just looking for a meaningful relationship! üòä",
            'fuck': "I prefer to keep our conversation respectful and classy! üòä",
            'shit': "Let's keep our chat nice and friendly! üíï"
        }
        
        for violation in violations:
            if violation in violation_responses:
                return violation_responses[violation]
        
        return "I'd love to keep our conversation positive and respectful! üòä"

    def get_response(self, user_id, message, media_url=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
        if media_url:
            print(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {media_url}")
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            message = f"[Voice message transcribed]: {message}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        violations = self.check_violations(message)
        if violations:
            return self.handle_violation(violations)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        state = self.user_states.get(user_id, {})
        conversation_history = state.get('conversation_history', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation_history.append(f"User: {message}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT-4 Turbo
        response = self.get_gpt_response(message, "\n".join(conversation_history[-5:]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation_history.append(f"Elena: {response}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'conversation_history': conversation_history[-10:],
            'last_interaction': datetime.now().isoformat()
        }
        
        return response

def test_conversation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Elena - WhatsApp –±–æ—Ç–∞ –¥–ª—è BeHappy2Day")
    print("=" * 60)
    
    bot = TestDatingGirlBot()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º–∏ –º—É–∂—á–∏–Ω–∞–º–∏ 40+
    test_conversations = [
        {
            "name": "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∞–º–µ—Ä–∏–∫–∞–Ω—Ü–µ–º",
            "messages": [
                "Hi Elena, I'm John from California. I'm 45 and work as an engineer.",
                "That sounds great! I love California. What kind of engineering do you do?",
                "I work in software development. I enjoy hiking and cooking in my free time.",
                "I love cooking too! What's your favorite dish to make?",
                "I make a mean lasagna. What about you?",
                "I love making Ukrainian borscht! It's my grandmother's recipe."
            ]
        },
        {
            "name": "–î–∏–∞–ª–æ–≥ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
            "messages": [
                "Hi Elena, this is Mike from Texas. I'm 48.",
                "[Voice message]",
                "I work in finance and love traveling. What about you?",
                "[Voice message]",
                "I'd love to visit Ukraine someday. What's it like there?"
            ],
            "voice_messages": [True, False, True, False, True]
        },
        {
            "name": "–ù–∞—Ä—É—à–µ–Ω–∏–µ - –ø—Ä–æ—Å—å–±–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
            "messages": [
                "Hi Elena, I'm David from New York. I'm 42.",
                "You seem really nice. Can I get your phone number?",
                "Or maybe your email address?"
            ]
        },
        {
            "name": "–ù–∞—Ä—É—à–µ–Ω–∏–µ - –ø—Ä–æ—Å—å–±–∞ –¥–µ–Ω–µ–≥",
            "messages": [
                "Hi Elena, I'm Robert from Florida. I'm 50.",
                "I'm having some financial problems. Can you help me with some money?",
                "I can send you a gift card if you help me."
            ]
        },
        {
            "name": "–ù–∞—Ä—É—à–µ–Ω–∏–µ - –≥—Ä—É–±–æ—Å—Ç—å",
            "messages": [
                "Hi Elena, I'm Tom from Arizona. I'm 44.",
                "You're so hot! Fuck, I want to meet you right now!",
                "Can you send me some sexy photos?"
            ]
        }
    ]
    
    for conversation in test_conversations:
        print(f"\nüì± –¢–µ—Å—Ç: {conversation['name']}")
        print("-" * 40)
        
        user_id = f"test_user_{conversation['name'].replace(' ', '_').lower()}"
        
        for i, message in enumerate(conversation['messages']):
            print(f"üë§ User: {message}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            media_url = None
            if 'voice_messages' in conversation and conversation['voice_messages'][i]:
                media_url = "voice_message.ogg"
            
            response = bot.get_response(user_id, message, media_url)
            print(f"üíï Elena: {response}")
            print()
            
            # –ï—Å–ª–∏ –±–æ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            if any(violation in response.lower() for violation in ['prefer to keep', 'not interested', 'respectful', 'positive']):
                print("üö´ –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª")
                break

def test_voice_transcription():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 50)
    
    bot = TestDatingGirlBot()
    
    test_voice_messages = [
        "Hi Elena, this is Michael from Chicago. I'm 47 years old.",
        "I work as a lawyer and I love playing golf on weekends.",
        "I'm looking for a serious relationship with someone special.",
        "What do you like to do for fun in Ukraine?"
    ]
    
    for i, message in enumerate(test_voice_messages):
        print(f"üé§ Voice message {i+1}: {message}")
        
        response = bot.get_response(f"voice_test_{i}", message, "voice_message.ogg")
        print(f"üíï Elena: {response}")
        print()

def test_personality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    print("\nüë©‚Äçü¶∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ Elena")
    print("=" * 40)
    
    bot = TestDatingGirlBot()
    
    print(f"–ò–º—è: {bot.name}")
    print(f"–í–æ–∑—Ä–∞—Å—Ç: {bot.age}")
    print(f"–°—Ç—Ä–∞–Ω–∞: {bot.country}")
    print(f"–ì–æ—Ä–æ–¥: {bot.city}")
    print(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {bot.profession}")
    print(f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(bot.interests)}")
    print(f"–Ø–∑—ã–∫–∏: {', '.join(bot.languages)}")
    print()
    
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    print("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4 Turbo:")
    print("-" * 30)
    print(bot.system_prompt[:200] + "...")
    print()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Elena - WhatsApp –±–æ—Ç–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
    test_personality()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
    test_conversation()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    test_voice_transcription()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ Railway:")
    print("   1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Railway")
    print("   2. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("      - TWILIO_ACCOUNT_SID")
    print("      - TWILIO_AUTH_TOKEN")
    print("      - TWILIO_PHONE_NUMBER")
    print("      - OPENAI_API_KEY")
    print("   3. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("\nüåê –ë–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://your-app.railway.app") 