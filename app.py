#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WhatsApp Bot –¥–ª—è BeHappy2Day
–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤ –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import json
import logging
from datetime import datetime
from flask import Flask, request, jsonify
from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse
from dotenv import load_dotenv
import openai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Twilio
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN) if TWILIO_ACCOUNT_SID else None
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_states = {}

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
class DatingBot:
    def __init__(self):
        self.welcome_messages = [
            "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–∞–≤—á–∏–∫! üòä –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å –Ω–∞ BeHappy2Day! –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            "–û–π, –ø—Ä–∏–≤–µ—Ç! üíï –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            "–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π! üåπ –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É? –ù–∞—á–Ω–µ–º —Å —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏!"
        ]
        
        self.questions = {
            'name': "–û—Ç–ª–∏—á–Ω–æ! –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
            'age': "–ö—Ä—É—Ç–æ! –ò–∑ –∫–∞–∫–æ–π —Ç—ã —Å—Ç—Ä–∞–Ω—ã?",
            'country': "–ß—Ç–æ —Ç—ã –∏—â–µ—à—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö? –°–µ—Ä—å–µ–∑–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ?",
            'relationship_goal': "–ü–æ–Ω—è—Ç–Ω–æ! –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–µ—Ç–∏?",
            'children': "–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –æ–±—â–∞—Ç—å—Å—è?",
            'language': "–°—É–ø–µ—Ä! –°–µ–π—á–∞—Å —è —Å–æ–∑–¥–∞–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ BeHappy2Day! üíï"
        }
        
        self.violations = [
            'phone', 'email', '@', 'whatsapp', 'telegram', 'instagram', 'facebook',
            'girl', 'minor', 'child', 'teen', 'money', 'gift', 'pay', 'send',
            'politics', 'government', 'election', 'rude', 'fuck', 'shit'
        ]

    def check_violations(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª"""
        message_lower = message.lower()
        violations = []
        
        for violation in self.violations:
            if violation in message_lower:
                violations.append(violation)
        
        return violations

    def get_response(self, user_id, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        violations = self.check_violations(message)
        if violations:
            return self.handle_violation(violations)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = user_states.get(user_id, {})
        current_step = state.get('step', 'welcome')
        
        if current_step == 'welcome':
            return self.handle_welcome(user_id, message)
        elif current_step == 'name':
            return self.handle_name(user_id, message)
        elif current_step == 'age':
            return self.handle_age(user_id, message)
        elif current_step == 'country':
            return self.handle_country(user_id, message)
        elif current_step == 'relationship_goal':
            return self.handle_relationship_goal(user_id, message)
        elif current_step == 'children':
            return self.handle_children(user_id, message)
        elif current_step == 'language':
            return self.handle_language(user_id, message)
        else:
            return self.handle_completion(user_id, message)

    def handle_violation(self, violations):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
        violation_messages = {
            'phone': "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞! üòä",
            'email': "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ! üíï",
            'money': "–Ø –Ω–µ –ø—Ä–æ—à—É –¥–µ–Ω–µ–≥ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤! –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è —á–µ—Å—Ç–Ω–æ! üòò",
            'minor': "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–æ! –î–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º! üíï",
            'gift': "–Ø –Ω–µ –ø—Ä–æ—à—É –ø–æ–¥–∞—Ä–∫–æ–≤! –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è —á–µ—Å—Ç–Ω–æ! üòò",
            'pay': "–Ø –Ω–µ –ø—Ä–æ—à—É –¥–µ–Ω–µ–≥! –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è —á–µ—Å—Ç–Ω–æ! üòò",
            'fuck': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—â–∞–π—Å—è –≤–µ–∂–ª–∏–≤–æ! üòä",
            'shit': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—â–∞–π—Å—è –≤–µ–∂–ª–∏–≤–æ! üòä"
        }
        
        for violation in violations:
            if violation in violation_messages:
                return violation_messages[violation]
        
        return "–ò–∑–≤–∏–Ω–∏, –Ω–æ —ç—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞! –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è –≤–µ–∂–ª–∏–≤–æ! üòä"

    def handle_welcome(self, user_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        user_states[user_id] = {
            'step': 'name',
            'data': {}
        }
        return self.questions['name']

    def handle_name(self, user_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
        user_states[user_id]['data']['name'] = message
        user_states[user_id]['step'] = 'age'
        return self.questions['age']

    def handle_age(self, user_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            age = int(message)
            if age < 18:
                return "–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18+ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! üòä"
            user_states[user_id]['data']['age'] = age
            user_states[user_id]['step'] = 'country'
            return self.questions['country']
        except ValueError:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏! üòä"

    def handle_country(self, user_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã"""
        user_states[user_id]['data']['country'] = message
        user_states[user_id]['step'] = 'relationship_goal'
        return self.questions['relationship_goal']

    def handle_relationship_goal(self, user_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
        user_states[user_id]['data']['relationship_goal'] = message
        user_states[user_id]['step'] = 'children'
        return self.questions['children']

    def handle_children(self, user_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç—è—Ö"""
        user_states[user_id]['data']['children'] = message
        user_states[user_id]['step'] = 'language'
        return self.questions['language']

    def handle_language(self, user_id, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞ –æ–±—â–µ–Ω–∏—è"""
        user_states[user_id]['data']['language'] = message
        user_states[user_id]['step'] = 'completed'
        return self.handle_completion(user_id, message)

    def handle_completion(self, user_id, message):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user_data = user_states[user_id]['data']
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        self.save_lead(user_data)
        
        completion_message = f"""
–û—Ç–ª–∏—á–Ω–æ, {user_data.get('name', '–º–∏–ª—ã–π')}! üíï

–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! –í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ò–º—è: {user_data.get('name')}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age')}
‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {user_data.get('country')}
‚Ä¢ –¶–µ–ª—å: {user_data.get('relationship_goal')}
‚Ä¢ –î–µ—Ç–∏: {user_data.get('children')}
‚Ä¢ –Ø–∑—ã–∫: {user_data.get('language')}

–°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ BeHappy2Day! 

–°–∞–π—Ç: https://behappy2day.com
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: polovinka@behappy2day.com

–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö –ª—é–±–≤–∏! üíã
        """
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if user_id in user_states:
            del user_states[user_id]
        
        return completion_message.strip()

    def save_lead(self, user_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–∞"""
        lead_data = {
            'timestamp': datetime.now().isoformat(),
            'source': 'whatsapp_bot',
            'data': user_data
        }
        
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ CRM
        logger.info(f"–ù–æ–≤—ã–π –ª–∏–¥: {json.dumps(lead_data, ensure_ascii=False)}")
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ email
        try:
            with open('leads.json', 'a', encoding='utf-8') as f:
                f.write(json.dumps(lead_data, ensure_ascii=False) + '\n')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = DatingBot()

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Twilio"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Twilio
        incoming_msg = request.values.get('Body', '').strip()
        sender = request.values.get('From', '')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}: {incoming_msg}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
        response_text = bot.get_response(sender, incoming_msg)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        resp = MessagingResponse()
        resp.message(response_text)
        
        return str(resp)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'twilio_configured': bool(TWILIO_ACCOUNT_SID),
        'openai_configured': bool(OPENAI_API_KEY)
    })

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': 'WhatsApp Bot –¥–ª—è BeHappy2Day',
        'version': '1.0.0',
        'endpoints': {
            'webhook': '/webhook',
            'health': '/health'
        }
    })

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True) 