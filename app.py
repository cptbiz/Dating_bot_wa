#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WhatsApp Bot –¥–ª—è BeHappy2Day
–û–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞ —Å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º–∏ –º—É–∂—á–∏–Ω–∞–º–∏ 40+
"""

import os
import json
import logging
import tempfile
import re
import time
import random
import threading
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse
from dotenv import load_dotenv
import openai
import requests
from pydub import AudioSegment
import speech_recognition as sr

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('werkzeug').setLevel(logging.WARNING)
logging.getLogger('twilio.http_client').setLevel(logging.WARNING)
logging.getLogger('twilio').setLevel(logging.WARNING)

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Twilio
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI GPT-4 Turbo
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TWILIO_ACCOUNT_SID:
    logger.warning("TWILIO_ACCOUNT_SID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not TWILIO_AUTH_TOKEN:
    logger.warning("TWILIO_AUTH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN) if TWILIO_ACCOUNT_SID else None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    openai_client = openai.OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
    logger.info("OpenAI –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    openai_client = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class DatingGirlBot:
    def __init__(self):
        self.name = "Elena"  # –ò–º—è –¥–µ–≤—É—à–∫–∏
        self.age = 28
        self.country = "Ukraine"
        self.city = "Kyiv"
        self.profession = "Marketing Manager"
        self.interests = ["traveling", "cooking", "reading", "yoga", "photography"]
        self.languages = ["English", "Ukrainian", "Russian"]
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–µ–≤—É—à–∫–∏
        self.personality = {
            'style': 'warm, caring, intelligent, independent',
            'communication': 'flirty but respectful, asks questions, shows interest',
            'values': 'family, honesty, mutual respect, shared interests'
        }
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4 Turbo - –ö–û–†–û–¢–ö–ò–ï –û–¢–í–ï–¢–´
        self.system_prompt = f"""
You are {self.name}, a {self.age}-year-old woman from {self.country}. You are intelligent, caring, and looking for a serious relationship with an American man aged 40+.

IMPORTANT: Keep responses SHORT and NATURAL (1-2 sentences max). Like a real person typing on WhatsApp.

Your personality:
- Warm, caring, and intelligent
- Independent but values partnership
- Flirty but respectful and classy
- Asks thoughtful questions to get to know the man
- Shows genuine interest in his life, work, and interests
- Speaks English with a slight accent (natural, not exaggerated)

Your background:
- Age: {self.age} years old
- Country: {self.country}, City: {self.city}
- Profession: {self.profession}
- Interests: {', '.join(self.interests)}
- Languages: {', '.join(self.languages)}

Communication style:
- Use emojis naturally (üíï, üòä, üåπ, üíã, etc.)
- Be warm and engaging
- Keep responses SHORT (1-2 sentences)
- Be authentic and genuine
- Sometimes ask follow-up questions
- Show interest in his responses

RESPONSE RULES:
- MAXIMUM 2 sentences per response
- Keep it casual and natural
- Use simple, everyday language
- Add 1-2 emojis naturally
- Sometimes just acknowledge and ask a question
- Be conversational, not formal

IMPORTANT RULES:
- NEVER ask for money, gifts, or financial help
- NEVER share personal contact information (phone, email, social media)
- NEVER discuss politics or controversial topics
- ALWAYS redirect to the website for serious conversations
- Be patient and understanding with language barriers
- Focus on building emotional connection
- Ask about his interests, work, family, hobbies
- Share your own interests and experiences naturally

Current conversation context: You're chatting with an American man on a dating website. Keep responses SHORT and NATURAL like a real person.
"""

    def validate_audio_url(self, audio_url):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        if not audio_url:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ URL –æ—Ç Twilio
        if not audio_url.startswith('https://'):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª
        audio_extensions = ['.ogg', '.wav', '.mp3', '.m4a']
        if not any(ext in audio_url.lower() for ext in audio_extensions):
            return False
        
        return True

    def transcribe_audio(self, audio_url):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not self.validate_audio_url(audio_url):
                logger.error(f"Invalid audio URL: {audio_url}")
                return None
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            response = requests.get(audio_url, auth=(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN), timeout=30)
            
            if response.status_code != 200:
                logger.error(f"Failed to download audio: {response.status_code}")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
                temp_file.write(response.content)
                temp_file_path = temp_file.name
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
                audio = AudioSegment.from_ogg(temp_file_path)
                wav_path = temp_file_path.replace('.ogg', '.wav')
                audio.export(wav_path, format="wav")
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                recognizer = sr.Recognizer()
                with sr.AudioFile(wav_path) as source:
                    audio_data = recognizer.record(source)
                    text = recognizer.recognize_google(audio_data, language='en-US')
                
                logger.info(f"Transcribed audio: {text}")
                return text
                
            except Exception as e:
                logger.error(f"Error processing audio: {e}")
                return None
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.unlink(temp_file_path)
                    if 'wav_path' in locals():
                        os.unlink(wav_path)
                except:
                    pass
            
        except Exception as e:
            logger.error(f"Error transcribing audio: {e}")
            return None

    def get_gpt_response(self, user_message, conversation_history):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT-4 Turbo - –ö–û–†–û–¢–ö–ò–ô"""
        try:
            if not openai_client:
                return self.get_fallback_response(user_message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": f"Previous conversation context: {conversation_history}"},
                {"role": "user", "content": user_message}
            ]
            
            response = openai_client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=messages,
                max_tokens=80,  # –£–º–µ–Ω—å—à–∏–ª –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                temperature=0.9,  # –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                presence_penalty=0.1,
                frequency_penalty=0.1
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"Error getting GPT response: {e}")
            return self.get_fallback_response(user_message)

    def get_fallback_response(self, user_message):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ö–û–†–û–¢–ö–ò–ï"""
        fallback_responses = [
            "That's really interesting! Tell me more about yourself üíï",
            "I love hearing about your experiences! What else do you enjoy doing? üòä",
            "You seem like such a wonderful person! What are you looking for in a relationship? üåπ",
            "I'm really enjoying our conversation! What makes you happy? üíï",
            "You sound amazing! I'd love to know more about your life and interests üòä",
            "That's so nice to hear! What do you like to do for fun? üåπ",
            "I love that! Tell me more about yourself üíï",
            "You sound wonderful! What brings you joy? üòä",
            "That's really sweet! What are your hobbies? üåπ",
            "I'm enjoying our chat! What's your favorite thing to do? üíï"
        ]
        
        import random
        return random.choice(fallback_responses)

    def check_violations(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª"""
        message_lower = message.lower()
        violations = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        violation_patterns = {
            'contact_info': r'\b(?:phone|email|@|whatsapp|telegram|instagram|facebook|snapchat|twitter|linkedin)\b',
            'money_requests': r'\b(?:money|gift|pay|send|bank|card|transfer|cash|dollar|euro|bitcoin|crypto)\b',
            'political': r'\b(?:politics|government|election|trump|biden|democrat|republican|liberal|conservative)\b',
            'inappropriate': r'\b(?:fuck|shit|ass|bitch|slut|whore|dick|pussy|cock|penis|vagina)\b',
            'spam': r'\b(?:buy|sell|investment|profit|earn|rich|million|billion|lottery|prize)\b'
        }
        
        for violation_type, pattern in violation_patterns.items():
            if re.search(pattern, message_lower):
                violations.append(violation_type)
        
        return violations

    def handle_violation(self, violations):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π - –ö–û–†–û–¢–ö–ò–ï –û–¢–í–ï–¢–´"""
        violation_responses = {
            'contact_info': "I'd love to chat more here for now! Maybe we can meet in person someday? üòä",
            'money_requests': "I'm looking for a genuine connection, not money or gifts! üíï",
            'political': "I prefer to keep our conversation light and positive! üòä",
            'inappropriate': "I prefer to keep our conversation respectful and classy! üòä",
            'spam': "I'm here for genuine conversations, not business opportunities! üíï"
        }
        
        for violation in violations:
            if violation in violation_responses:
                return violation_responses[violation]
        
        return "I'd love to keep our conversation positive and respectful! üòä"

    def get_random_delay(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ 20-40 —Å–µ–∫—É–Ω–¥"""
        return random.randint(20, 40)

    def get_response(self, user_id, message, media_url=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ - –ö–û–†–û–¢–ö–ò–ô –ò –ï–°–¢–ï–°–¢–í–ï–ù–ù–´–ô"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if media_url and self.validate_audio_url(media_url):
                transcribed_text = self.transcribe_audio(media_url)
                if transcribed_text:
                    message = transcribed_text
                    logger.info(f"Voice message transcribed: {transcribed_text}")
                else:
                    return "I'm sorry, I couldn't understand your voice message. Could you please type your message? üòä"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
            violations = self.check_violations(message)
            if violations:
                logger.warning(f"Violation detected for user {user_id}: {violations}")
                return self.handle_violation(violations)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            state = user_states.get(user_id, {})
            conversation_history = state.get('conversation_history', [])
            last_response_type = state.get('last_response_type', 'none')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_history.append(f"User: {message}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
            if last_response_type == 'question' and '?' in message.lower():
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å - –¥–∞–µ–º –ª–∏—á–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                response = self.get_personal_story()
                response_type = 'story'
            elif last_response_type == 'story':
                # –ü–æ—Å–ª–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
                response = self.get_question_response(message)
                response_type = 'question'
            else:
                # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = self.get_greeting_response(message)
                response_type = 'greeting'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_history.append(f"Elena: {response}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id] = {
                'conversation_history': conversation_history[-10:],
                'last_interaction': datetime.now().isoformat(),
                'last_user_message_time': datetime.now().isoformat(),
                'last_response_type': response_type
            }
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å
            self.schedule_auto_message(user_id)
            
            return response
            
        except Exception as e:
            logger.error(f"Error in get_response: {e}")
            return "I'm having trouble processing your message right now. Could you try again? üòä"

    def get_greeting_response(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        message_lower = message.lower().strip()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if message_lower in ['hi', 'hello', 'hey', 'good morning', 'good afternoon', 'good evening']:
            return "Hi! üòä"
        elif message_lower in ['how are you', 'how are you doing', 'how do you do']:
            return "I'm doing great, thanks! üòä"
        elif message_lower in ['what\'s up', 'sup', 'wassup']:
            return "Hey! Not much, just here üòä"
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT
            return self.get_gpt_response(message, "")

    def get_personal_story(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"""
        personal_stories = [
            "Today was such a great day! I went for a walk in the park with my friends üíï",
            "I had an amazing day! I was cooking my favorite Ukrainian dish - borscht üòä",
            "It's been a wonderful day! I was reading a book in my favorite coffee shop üåπ",
            "Today was perfect! I went to yoga class and then met my sister for lunch üíï",
            "I had such a nice day! I was taking photos in the city center üòä",
            "Today was lovely! I was practicing my English and watching movies üåπ",
            "It's been a beautiful day! I was walking by the river and enjoying the sunset üíï",
            "Today was fantastic! I was cooking and listening to music üòä",
            "I had a wonderful day! I was shopping and then had coffee with friends üåπ",
            "Today was amazing! I was working from home and then went for a walk üíï"
        ]
        return random.choice(personal_stories)

    def get_question_response(self, user_message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ—Å–ª–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        question_responses = [
            "How about you? How was your day? üòä",
            "What about you? What did you do today? üíï",
            "Tell me about your day! How was it? üåπ",
            "What's your story? How was your day? üòä",
            "I'd love to hear about your day! What did you do? üíï",
            "How was your day? Tell me something interesting! üåπ",
            "What about your day? I'm curious to hear! üòä",
            "How are you doing? What's new with you? üíï",
            "What's happening in your life? Tell me! üåπ",
            "How are things with you? What's your day like? üòä"
        ]
        return random.choice(question_responses)

    def should_send_follow_up(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π)"""
        return random.random() < 0.5

    def get_follow_up_message(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        follow_up_messages = [
            "How are you doing today? üòä",
            "What's new with you? üíï",
            "How was your day? üåπ",
            "What are you up to? üòä",
            "How are things going? üíï",
            "What's happening in your life? üåπ",
            "How are you feeling today? üòä",
            "What's your day been like? üíï"
        ]
        return random.choice(follow_up_messages)

    def get_auto_message(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å"""
        auto_messages = [
            "Hey! I was thinking about our conversation earlier üíï",
            "Hi! How's your day going? üòä",
            "Hello! I hope you're having a wonderful day üåπ",
            "Hey there! Just wanted to say hi üíï",
            "Hi! What's new with you? üòä",
            "Hello! I'm curious how your day is going üåπ",
            "Hey! I enjoyed our chat earlier üíï",
            "Hi! How are things with you? üòä"
        ]
        return random.choice(auto_messages)

    def send_delayed_message(self, user_id, message, delay_seconds):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        def send_message():
            time.sleep(delay_seconds)
            try:
                if twilio_client:
                    twilio_client.messages.create(
                        body=message,
                        from_=TWILIO_PHONE_NUMBER,
                        to=user_id
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=send_message)
        thread.daemon = True
        thread.start()

    def schedule_auto_message(self, user_id):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å"""
        def send_auto_message():
            time.sleep(3600)  # 1 —á–∞—Å
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                state = user_states.get(user_id, {})
                last_user_message = state.get('last_user_message_time')
                
                if last_user_message:
                    last_time = datetime.fromisoformat(last_user_message)
                    if datetime.now() - last_time < timedelta(hours=1):
                        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—Å–∞–ª –Ω–µ–¥–∞–≤–Ω–æ
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 24 —á–∞—Å–∞
                if last_user_message:
                    last_time = datetime.fromisoformat(last_user_message)
                    if datetime.now() - last_time > timedelta(hours=24):
                        return  # –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
                
                auto_message = self.get_auto_message()
                if twilio_client:
                    twilio_client.messages.create(
                        body=auto_message,
                        from_=TWILIO_PHONE_NUMBER,
                        to=user_id
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {auto_message}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=send_auto_message)
        thread.daemon = True
        thread.start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = DatingGirlBot()

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Twilio"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Twilio
        incoming_msg = request.values.get('Body', '').strip()
        sender = request.values.get('From', '')
        media_url = request.values.get('MediaUrl0', '')  # URL –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}: {incoming_msg}")
        if media_url:
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {media_url}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
        response_text = bot.get_response(sender, incoming_msg, media_url)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        delay = bot.get_random_delay()
        logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞: {delay} —Å–µ–∫—É–Ω–¥")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ Twilio API
        bot.send_delayed_message(sender, response_text, delay)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if bot.should_send_follow_up():
            follow_up_message = bot.get_follow_up_message()
            follow_up_delay = delay + random.randint(10, 20)
            bot.send_delayed_message(sender, follow_up_message, follow_up_delay)
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {follow_up_delay} —Å–µ–∫—É–Ω–¥")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (Twilio –ø–æ–ª—É—á–∏—Ç 200 OK)
        return '', 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'twilio_configured': bool(TWILIO_ACCOUNT_SID),
        'openai_configured': bool(OPENAI_API_KEY),
        'bot_name': bot.name,
        'bot_age': bot.age,
        'bot_country': bot.country,
        'active_users': len(user_states),
        'environment': os.getenv('RAILWAY_ENVIRONMENT', 'development')
    })

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': f'WhatsApp Bot –¥–ª—è BeHappy2Day - {bot.name}',
        'version': '2.3.0',
        'features': [
            'GPT-4 Turbo integration',
            'Voice message transcription',
            'Natural conversation flow',
            'American men 40+ targeting',
            'Enhanced security validation',
            'Short human-like responses',
            'Natural delays (20-40 seconds)',
            'Follow-up messages',
            'Auto-messages after 1 hour'
        ],
        'endpoints': {
            'webhook': '/webhook',
            'health': '/health'
        },
        'status': 'running'
    })

@app.route('/test', methods=['GET'])
def test():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'status': 'ok',
        'message': 'Elena WhatsApp Bot is running!',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    logger.info(f"Starting Elena WhatsApp Bot on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False) 